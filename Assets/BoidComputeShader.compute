#pragma kernel SteeringForcesCS
#pragma kernel BoidsDataCS

#define THREAD_GROUP_SIZE 128
#define TABLE_SIZE 1024

struct BoidData
{
    float3 velocity;
    float3 position;
};

//struct Buffa
//{
//    uint offset = 0;
//    uint size = 50;
//    BoidData value[50];
    
//};

//struct HashEntry
//{
//    uint3 key;
//    Buffa array;
//};

//RWStructuredBuffer<HashEntry> hashTable;

//bool KeysMatch(uint3 a, uint3 b)
//{
//    return all(a == b);
//}

//uint HashFunction(uint3 key)
//{
//    return (key.x * 73856093 ^ key.y * 19349663 ^ key.z * 83492791) % TABLE_SIZE;
//}

//[numthreads(1, 1, 1)]
//void Insert(uint3 id : SV_DispatchThreadID, uint3 key, uint value)
//{
//    uint index = HashFunction(key);
//    uint3 originalKey;

//    // Linear Probing
//    for (uint i = 0; i < TABLE_SIZE; i++)
//    {
//        uint probeIndex = (index + i) % TABLE_SIZE;
//        InterlockedCompareExchange(hashTable[probeIndex].key.x, 0, key.x, originalKey.x);
//        InterlockedCompareExchange(hashTable[probeIndex].key.y, 0, key.y, originalKey.y);
//        InterlockedCompareExchange(hashTable[probeIndex].key.z, 0, key.z, originalKey.z);

//        if (all(originalKey == 0) || KeysMatch(originalKey, key))
//        {
//            hashTable[probeIndex].array = value;
//            return;
//        }
//    }
//}

//Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Boids read-only structured buffer
StructuredBuffer<BoidData> _BoidsDataBuffer;

// Boids read-write structured buffer
RWStructuredBuffer<BoidData> _BoidsDataBufferRw;

// Boids steering forces buffer
StructuredBuffer<float3> _BoidsSteeringForcesBuffer;

// Read-write boids steering forces buffer
RWStructuredBuffer<float3> _BoidsSteeringForcesBufferRw;

int _BoidsCount; // Total boids count

float _DeltaTime; // Time elapsed since the previous frame

//float _SeparationRadius; // Radius for applying separation to other individuals
//float _AlignmentRadius; // Radius for applying alignment to other individuals
//float _CohesionRadius; // Radius for applying cohesion to other individuals

float _PerceptionRadius;

float _BoidMaximumSpeed;
float _BoidMaximumSteeringForce;

float _SeparationWeight; // Separation force appliance weight
float _AlignmentWeight; // Alignment force appliance weight
float _CohesionWeight; // Cohesion force appliance weight

float4 _SimulationCenter;
float4 _SimulationDimensions;
float _SimulationBoundsAvoidWeight;

groupshared BoidData boid_data[THREAD_GROUP_SIZE];


float3 limit(float3 vec, float max)
{
    float lengthSquared = dot(vec, vec);
   
    if (lengthSquared > max * max && lengthSquared > 0)
    {
        float length = sqrt(lengthSquared); // magnitude
        return vec.xyz * (max / length);
    }
    return vec.xyz;
}

float3 CheckSimulationBounds(float3 position)
{
    float3 wc = _SimulationCenter.xyz;
    float3 ws = _SimulationDimensions.xyz;

    float3 acc = float3(0, 0, 0);

    acc.x = (position.x < wc.x - ws.x * 0.5) ? 1.0 : ((position.x > wc.x + ws.x * 0.5) ? -1.0 : 0.0);
    acc.y = (position.y < wc.y - ws.y * 0.5) ? 1.0 : ((position.y > wc.y + ws.y * 0.5) ? -1.0 : 0.0);
    acc.z = (position.z < wc.z - ws.z * 0.5) ? 1.0 : ((position.z > wc.z + ws.z * 0.5) ? -1.0 : 0.0);


    return acc;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SteeringForcesCS(
   uint3 d_tid : SV_DispatchThreadID, // thread group unique ID
   uint gi : SV_GroupIndex // One-dimensional version of SV_GroupThreadID ranging from 0 to 255
)
{
    const unsigned int P_ID = d_tid.x; // Self ID
    const float3 P_position = _BoidsDataBuffer[P_ID].position; // Self position
    const float3 P_velocity = _BoidsDataBuffer[P_ID].velocity; // Self velocity

   //Resulting steering force
    float3 force = float3(0, 0, 0);

   //Position offsets influenced by cohesion, alignment, and separation
    float3 separationPositionOffset = float3(0, 0, 0);
    float3 alignmentPositionOffset = float3(0, 0, 0);
    float3 cohesionPositionOffset = float3(0, 0, 0);

   //Cumulative count of boids that need to be influenced by cohesion, alignment, and separation
    int boidsInRange = 0;

   //Accumulated steering forces
    float3 separationSteering = float3(0, 0, 0);
    float3 alignmentSteering = float3(0, 0, 0);
    float3 cohesionSteering = float3(0, 0, 0);

   // Loop unrolling
    [loop]
    for (uint n_block_id = 0; n_block_id < (uint) _BoidsCount; n_block_id += THREAD_GROUP_SIZE)
    {
        boid_data[gi] = _BoidsDataBuffer[n_block_id + gi];
        GroupMemoryBarrierWithGroupSync();


        // Conditional execution and memory coalescing
        [unroll]
        for (uint N_tile_ID = 0; N_tile_ID < THREAD_GROUP_SIZE; N_tile_ID++)
        {
            const float3 N_position = boid_data[N_tile_ID].position;
            const float3 N_velocity = boid_data[N_tile_ID].velocity;


            const float3 diff = P_position - N_position; // position difference between current and other boids
            const float dist = sqrt(dot(diff, diff)); // distance difference between current and other boids

            if(N_tile_ID != P_ID && dist > 0 && dist < _PerceptionRadius) 
            {
                float3 repulse = normalize(P_position - N_position);
                repulse /= dist;
                separationPositionOffset += repulse;
                
                alignmentPositionOffset += N_velocity;
                
                cohesionPositionOffset += N_position;
                
                boidsInRange++;
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }
    //counting out self
    //boidsInRange;
    if(boidsInRange > 0)
    {
        float total = (float) boidsInRange;
        float3 zero = float3(0, 0, 0);
        
        separationSteering = separationPositionOffset / total; // Calculate the average
        separationSteering = length(separationSteering) > 0 ? normalize(separationSteering) * _BoidMaximumSpeed : zero;
        separationSteering = separationSteering - P_velocity; // Calculate steering force
        separationSteering = limit(separationSteering, _BoidMaximumSteeringForce); // Limit the steering force
        
        alignmentSteering = alignmentPositionOffset / total;
        alignmentSteering = length(alignmentSteering) > 0 ? normalize(alignmentSteering) * _BoidMaximumSpeed : zero;
        alignmentSteering = alignmentSteering - P_velocity;
        alignmentSteering = limit(alignmentSteering, _BoidMaximumSteeringForce);
        
        cohesionPositionOffset = cohesionPositionOffset / total;
        cohesionSteering = cohesionPositionOffset - P_position;
        cohesionSteering = length(cohesionSteering) > 0 ? normalize(cohesionSteering) * _BoidMaximumSpeed : zero;
        cohesionSteering = cohesionSteering - P_velocity;
        cohesionSteering = limit(cohesionSteering, _BoidMaximumSteeringForce);
    }
    
   
   //Pass accumulated steering forces to resulting value
    force += alignmentSteering * _AlignmentWeight;
    force += cohesionSteering * _CohesionWeight;
    force += separationSteering * _SeparationWeight;
   
    _BoidsSteeringForcesBufferRw[P_ID] = force;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void BoidsDataCS(uint3 DTid : SV_DispatchThreadID) // Thread-wide unique ID
{
    const unsigned int p_id = DTid.x; // Self ID
                                           
    BoidData boidData = _BoidsDataBufferRw[p_id]; // Read current Boid data
    float3 force = _BoidsSteeringForcesBuffer[p_id]; // Read steering force
   
   // Apply repelling force when approaching simulation bounds
    force += CheckSimulationBounds(boidData.position) * _SimulationBoundsAvoidWeight;

    boidData.velocity += force * _DeltaTime; // Apply steering force to velocity
    boidData.velocity = limit(boidData.velocity, _BoidMaximumSpeed); // Limit velocity
    boidData.position += boidData.velocity * _DeltaTime; // Update position
                                           
    _BoidsDataBufferRw[p_id] = boidData; // Write calculation result
}